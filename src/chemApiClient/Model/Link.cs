/* 
 * chemadvisor.io api
 *
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace chemApiClient.Model
{
    /// <summary>
    /// Link
    /// </summary>
    [DataContract]
    public partial class Link :  IEquatable<Link>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Link" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Link() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Link" /> class.
        /// </summary>
        /// <param name="Rel">Rel (required).</param>
        /// <param name="Allow">The HTTP methods allowed on the href (required).</param>
        /// <param name="Href">Href (required).</param>
        /// <param name="ContentType">ContentType (required).</param>
        public Link(string Rel = null, string Allow = null, string Href = null, string ContentType = null)
        {
            // to ensure "Rel" is required (not null)
            if (Rel == null)
            {
                throw new InvalidDataException("Rel is a required property for Link and cannot be null");
            }
            else
            {
                this.Rel = Rel;
            }
            // to ensure "Allow" is required (not null)
            if (Allow == null)
            {
                throw new InvalidDataException("Allow is a required property for Link and cannot be null");
            }
            else
            {
                this.Allow = Allow;
            }
            // to ensure "Href" is required (not null)
            if (Href == null)
            {
                throw new InvalidDataException("Href is a required property for Link and cannot be null");
            }
            else
            {
                this.Href = Href;
            }
            // to ensure "ContentType" is required (not null)
            if (ContentType == null)
            {
                throw new InvalidDataException("ContentType is a required property for Link and cannot be null");
            }
            else
            {
                this.ContentType = ContentType;
            }
        }
        
        /// <summary>
        /// Gets or Sets Rel
        /// </summary>
        [DataMember(Name="rel", EmitDefaultValue=false)]
        public string Rel { get; set; }
        /// <summary>
        /// The HTTP methods allowed on the href
        /// </summary>
        /// <value>The HTTP methods allowed on the href</value>
        [DataMember(Name="allow", EmitDefaultValue=false)]
        public string Allow { get; set; }
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }
        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public string ContentType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Link {\n");
            sb.Append("  Rel: ").Append(Rel).Append("\n");
            sb.Append("  Allow: ").Append(Allow).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Link);
        }

        /// <summary>
        /// Returns true if Link instances are equal
        /// </summary>
        /// <param name="other">Instance of Link to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Link other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Rel == other.Rel ||
                    this.Rel != null &&
                    this.Rel.Equals(other.Rel)
                ) && 
                (
                    this.Allow == other.Allow ||
                    this.Allow != null &&
                    this.Allow.Equals(other.Allow)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Rel != null)
                    hash = hash * 59 + this.Rel.GetHashCode();
                if (this.Allow != null)
                    hash = hash * 59 + this.Allow.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                return hash;
            }
        }
    }

}
