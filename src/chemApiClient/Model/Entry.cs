/* 
 * chemadvisor.io api
 *
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace chemApiClient.Model
{
    /// <summary>
    /// Contains substance level data
    /// </summary>
    [DataContract]
    public partial class Entry :  IEquatable<Entry>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Entry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Entry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Entry" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="SubstanceId">SubstanceId (required).</param>
        /// <param name="RegulatoryListId">RegulatoryListId (required).</param>
        /// <param name="ReleaseId">ReleaseId (required).</param>
        /// <param name="Identifiers">Identifiers.</param>
        /// <param name="Names">Names (required).</param>
        /// <param name="ChemicalData">ChemicalData.</param>
        /// <param name="Links">Links.</param>
        public Entry(string Id = null, int? SubstanceId = null, int? RegulatoryListId = null, int? ReleaseId = null, Identifiers Identifiers = null, SubstanceNames Names = null, EntryChemicalData ChemicalData = null, Links Links = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Entry and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "SubstanceId" is required (not null)
            if (SubstanceId == null)
            {
                throw new InvalidDataException("SubstanceId is a required property for Entry and cannot be null");
            }
            else
            {
                this.SubstanceId = SubstanceId;
            }
            // to ensure "RegulatoryListId" is required (not null)
            if (RegulatoryListId == null)
            {
                throw new InvalidDataException("RegulatoryListId is a required property for Entry and cannot be null");
            }
            else
            {
                this.RegulatoryListId = RegulatoryListId;
            }
            // to ensure "ReleaseId" is required (not null)
            if (ReleaseId == null)
            {
                throw new InvalidDataException("ReleaseId is a required property for Entry and cannot be null");
            }
            else
            {
                this.ReleaseId = ReleaseId;
            }
            // to ensure "Names" is required (not null)
            if (Names == null)
            {
                throw new InvalidDataException("Names is a required property for Entry and cannot be null");
            }
            else
            {
                this.Names = Names;
            }
            this.Identifiers = Identifiers;
            this.ChemicalData = ChemicalData;
            this.Links = Links;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets SubstanceId
        /// </summary>
        [DataMember(Name="substance_id", EmitDefaultValue=false)]
        public int? SubstanceId { get; set; }
        /// <summary>
        /// Gets or Sets RegulatoryListId
        /// </summary>
        [DataMember(Name="regulatory_list_id", EmitDefaultValue=false)]
        public int? RegulatoryListId { get; set; }
        /// <summary>
        /// Gets or Sets ReleaseId
        /// </summary>
        [DataMember(Name="release_id", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }
        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public Identifiers Identifiers { get; set; }
        /// <summary>
        /// Gets or Sets Names
        /// </summary>
        [DataMember(Name="names", EmitDefaultValue=false)]
        public SubstanceNames Names { get; set; }
        /// <summary>
        /// Gets or Sets ChemicalData
        /// </summary>
        [DataMember(Name="chemical_data", EmitDefaultValue=false)]
        public EntryChemicalData ChemicalData { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Entry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubstanceId: ").Append(SubstanceId).Append("\n");
            sb.Append("  RegulatoryListId: ").Append(RegulatoryListId).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  ChemicalData: ").Append(ChemicalData).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Entry);
        }

        /// <summary>
        /// Returns true if Entry instances are equal
        /// </summary>
        /// <param name="other">Instance of Entry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.SubstanceId == other.SubstanceId ||
                    this.SubstanceId != null &&
                    this.SubstanceId.Equals(other.SubstanceId)
                ) && 
                (
                    this.RegulatoryListId == other.RegulatoryListId ||
                    this.RegulatoryListId != null &&
                    this.RegulatoryListId.Equals(other.RegulatoryListId)
                ) && 
                (
                    this.ReleaseId == other.ReleaseId ||
                    this.ReleaseId != null &&
                    this.ReleaseId.Equals(other.ReleaseId)
                ) && 
                (
                    this.Identifiers == other.Identifiers ||
                    this.Identifiers != null &&
                    this.Identifiers.Equals(other.Identifiers)
                ) && 
                (
                    this.Names == other.Names ||
                    this.Names != null &&
                    this.Names.Equals(other.Names)
                ) && 
                (
                    this.ChemicalData == other.ChemicalData ||
                    this.ChemicalData != null &&
                    this.ChemicalData.Equals(other.ChemicalData)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.SubstanceId != null)
                    hash = hash * 59 + this.SubstanceId.GetHashCode();
                if (this.RegulatoryListId != null)
                    hash = hash * 59 + this.RegulatoryListId.GetHashCode();
                if (this.ReleaseId != null)
                    hash = hash * 59 + this.ReleaseId.GetHashCode();
                if (this.Identifiers != null)
                    hash = hash * 59 + this.Identifiers.GetHashCode();
                if (this.Names != null)
                    hash = hash * 59 + this.Names.GetHashCode();
                if (this.ChemicalData != null)
                    hash = hash * 59 + this.ChemicalData.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }
    }

}
