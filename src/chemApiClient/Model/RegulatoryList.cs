/* 
 * chemadvisor.io api
 *
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace chemApiClient.Model
{
    /// <summary>
    /// Contains Substance Level Regulatory or Non-Regulatory Data
    /// </summary>
    [DataContract]
    public partial class RegulatoryList :  IEquatable<RegulatoryList>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegulatoryList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegulatoryList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegulatoryList" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="NavigatorLink">NavigatorLink.</param>
        /// <param name="SourceLink">SourceLink.</param>
        /// <param name="Description">Description.</param>
        /// <param name="IsInventory">IsInventory (default to false).</param>
        /// <param name="SourceLanguages">SourceLanguages (required).</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="Entries">Entries.</param>
        /// <param name="Links">Links.</param>
        public RegulatoryList(int? Id = null, string Name = null, string NavigatorLink = null, string SourceLink = null, string Description = null, bool? IsInventory = null, Languages SourceLanguages = null, Tags Tags = null, Entries Entries = null, Links Links = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for RegulatoryList and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for RegulatoryList and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "SourceLanguages" is required (not null)
            if (SourceLanguages == null)
            {
                throw new InvalidDataException("SourceLanguages is a required property for RegulatoryList and cannot be null");
            }
            else
            {
                this.SourceLanguages = SourceLanguages;
            }
            this.NavigatorLink = NavigatorLink;
            this.SourceLink = SourceLink;
            this.Description = Description;
            // use default value if no "IsInventory" provided
            if (IsInventory == null)
            {
                this.IsInventory = false;
            }
            else
            {
                this.IsInventory = IsInventory;
            }
            this.Tags = Tags;
            this.Entries = Entries;
            this.Links = Links;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets NavigatorLink
        /// </summary>
        [DataMember(Name="navigator_link", EmitDefaultValue=false)]
        public string NavigatorLink { get; set; }
        /// <summary>
        /// Gets or Sets SourceLink
        /// </summary>
        [DataMember(Name="source_link", EmitDefaultValue=false)]
        public string SourceLink { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets IsInventory
        /// </summary>
        [DataMember(Name="is_inventory", EmitDefaultValue=false)]
        public bool? IsInventory { get; set; }
        /// <summary>
        /// Gets or Sets SourceLanguages
        /// </summary>
        [DataMember(Name="source_languages", EmitDefaultValue=false)]
        public Languages SourceLanguages { get; set; }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public Tags Tags { get; set; }
        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public Entries Entries { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegulatoryList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NavigatorLink: ").Append(NavigatorLink).Append("\n");
            sb.Append("  SourceLink: ").Append(SourceLink).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsInventory: ").Append(IsInventory).Append("\n");
            sb.Append("  SourceLanguages: ").Append(SourceLanguages).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RegulatoryList);
        }

        /// <summary>
        /// Returns true if RegulatoryList instances are equal
        /// </summary>
        /// <param name="other">Instance of RegulatoryList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegulatoryList other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NavigatorLink == other.NavigatorLink ||
                    this.NavigatorLink != null &&
                    this.NavigatorLink.Equals(other.NavigatorLink)
                ) && 
                (
                    this.SourceLink == other.SourceLink ||
                    this.SourceLink != null &&
                    this.SourceLink.Equals(other.SourceLink)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.IsInventory == other.IsInventory ||
                    this.IsInventory != null &&
                    this.IsInventory.Equals(other.IsInventory)
                ) && 
                (
                    this.SourceLanguages == other.SourceLanguages ||
                    this.SourceLanguages != null &&
                    this.SourceLanguages.Equals(other.SourceLanguages)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.Equals(other.Tags)
                ) && 
                (
                    this.Entries == other.Entries ||
                    this.Entries != null &&
                    this.Entries.Equals(other.Entries)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NavigatorLink != null)
                    hash = hash * 59 + this.NavigatorLink.GetHashCode();
                if (this.SourceLink != null)
                    hash = hash * 59 + this.SourceLink.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.IsInventory != null)
                    hash = hash * 59 + this.IsInventory.GetHashCode();
                if (this.SourceLanguages != null)
                    hash = hash * 59 + this.SourceLanguages.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Entries != null)
                    hash = hash * 59 + this.Entries.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }
    }

}
