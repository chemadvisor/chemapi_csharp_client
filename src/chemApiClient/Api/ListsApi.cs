/* 
 * chemadvisor.io api
 *
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using chemApiClient.Client;
using chemApiClient.Model;

namespace chemApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return a paginated collection of entries for a single Regulatory List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter, for more information &lt;http://chemadvisor.io/docs/api/v2/filtering.html&gt; (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Entries</returns>
        Entries GetEntries (string regulatoryListId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);

        /// <summary>
        /// Return a paginated collection of entries for a single Regulatory List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter, for more information &lt;http://chemadvisor.io/docs/api/v2/filtering.html&gt; (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Entries</returns>
        ApiResponse<Entries> GetEntriesWithHttpInfo (string regulatoryListId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);
        /// <summary>
        /// Find the entries for a specific Substance on List
        /// </summary>
        /// <remarks>
        /// Returns a collection of entries for a single Substance from a single Regulatory List
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Entry</returns>
        Entry GetEntry (string regulatoryListId, string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// Find the entries for a specific Substance on List
        /// </summary>
        /// <remarks>
        /// Returns a collection of entries for a single Substance from a single Regulatory List
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Entry</returns>
        ApiResponse<Entry> GetEntryWithHttpInfo (string regulatoryListId, string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// Find a Regulatory List by ID
        /// </summary>
        /// <remarks>
        /// Returns a single Regulatory List
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>RegulatoryList</returns>
        RegulatoryList GetList (string regulatoryListId, string appKey = null, string appId = null);

        /// <summary>
        /// Find a Regulatory List by ID
        /// </summary>
        /// <remarks>
        /// Returns a single Regulatory List
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of RegulatoryList</returns>
        ApiResponse<RegulatoryList> GetListWithHttpInfo (string regulatoryListId, string appKey = null, string appId = null);
        /// <summary>
        /// All Lists
        /// </summary>
        /// <remarks>
        /// A paginated collection of Regulatory Lists
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>RegulatoryLists</returns>
        RegulatoryLists GetLists (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);

        /// <summary>
        /// All Lists
        /// </summary>
        /// <remarks>
        /// A paginated collection of Regulatory Lists
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of RegulatoryLists</returns>
        ApiResponse<RegulatoryLists> GetListsWithHttpInfo (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Return a paginated collection of entries for a single Regulatory List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter, for more information &lt;http://chemadvisor.io/docs/api/v2/filtering.html&gt; (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Entries</returns>
        System.Threading.Tasks.Task<Entries> GetEntriesAsync (string regulatoryListId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);

        /// <summary>
        /// Return a paginated collection of entries for a single Regulatory List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter, for more information &lt;http://chemadvisor.io/docs/api/v2/filtering.html&gt; (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Entries)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entries>> GetEntriesAsyncWithHttpInfo (string regulatoryListId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);
        /// <summary>
        /// Find the entries for a specific Substance on List
        /// </summary>
        /// <remarks>
        /// Returns a collection of entries for a single Substance from a single Regulatory List
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Entry</returns>
        System.Threading.Tasks.Task<Entry> GetEntryAsync (string regulatoryListId, string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// Find the entries for a specific Substance on List
        /// </summary>
        /// <remarks>
        /// Returns a collection of entries for a single Substance from a single Regulatory List
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Entry)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entry>> GetEntryAsyncWithHttpInfo (string regulatoryListId, string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// Find a Regulatory List by ID
        /// </summary>
        /// <remarks>
        /// Returns a single Regulatory List
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of RegulatoryList</returns>
        System.Threading.Tasks.Task<RegulatoryList> GetListAsync (string regulatoryListId, string appKey = null, string appId = null);

        /// <summary>
        /// Find a Regulatory List by ID
        /// </summary>
        /// <remarks>
        /// Returns a single Regulatory List
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (RegulatoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegulatoryList>> GetListAsyncWithHttpInfo (string regulatoryListId, string appKey = null, string appId = null);
        /// <summary>
        /// All Lists
        /// </summary>
        /// <remarks>
        /// A paginated collection of Regulatory Lists
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of RegulatoryLists</returns>
        System.Threading.Tasks.Task<RegulatoryLists> GetListsAsync (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);

        /// <summary>
        /// All Lists
        /// </summary>
        /// <remarks>
        /// A paginated collection of Regulatory Lists
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (RegulatoryLists)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegulatoryLists>> GetListsAsyncWithHttpInfo (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListsApi : IListsApi
    {
        private chemApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = chemApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = chemApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public chemApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Return a paginated collection of entries for a single Regulatory List 
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter, for more information &lt;http://chemadvisor.io/docs/api/v2/filtering.html&gt; (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Entries</returns>
        public Entries GetEntries (string regulatoryListId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
             ApiResponse<Entries> localVarResponse = GetEntriesWithHttpInfo(regulatoryListId, limit, offset, q, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a paginated collection of entries for a single Regulatory List 
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter, for more information &lt;http://chemadvisor.io/docs/api/v2/filtering.html&gt; (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Entries</returns>
        public ApiResponse< Entries > GetEntriesWithHttpInfo (string regulatoryListId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
            // verify the required parameter 'regulatoryListId' is set
            if (regulatoryListId == null)
                throw new ApiException(400, "Missing required parameter 'regulatoryListId' when calling ListsApi->GetEntries");

            var localVarPath = "/regulatory_lists/{regulatory_list_id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regulatoryListId != null) localVarPathParams.Add("regulatory_list_id", Configuration.ApiClient.ParameterToString(regulatoryListId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entries) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entries)));
            
        }

        /// <summary>
        /// Return a paginated collection of entries for a single Regulatory List 
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter, for more information &lt;http://chemadvisor.io/docs/api/v2/filtering.html&gt; (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Entries</returns>
        public async System.Threading.Tasks.Task<Entries> GetEntriesAsync (string regulatoryListId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
             ApiResponse<Entries> localVarResponse = await GetEntriesAsyncWithHttpInfo(regulatoryListId, limit, offset, q, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a paginated collection of entries for a single Regulatory List 
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter, for more information &lt;http://chemadvisor.io/docs/api/v2/filtering.html&gt; (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Entries)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Entries>> GetEntriesAsyncWithHttpInfo (string regulatoryListId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
            // verify the required parameter 'regulatoryListId' is set
            if (regulatoryListId == null)
                throw new ApiException(400, "Missing required parameter 'regulatoryListId' when calling ListsApi->GetEntries");

            var localVarPath = "/regulatory_lists/{regulatory_list_id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regulatoryListId != null) localVarPathParams.Add("regulatory_list_id", Configuration.ApiClient.ParameterToString(regulatoryListId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entries) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entries)));
            
        }

        /// <summary>
        /// Find the entries for a specific Substance on List Returns a collection of entries for a single Substance from a single Regulatory List
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Entry</returns>
        public Entry GetEntry (string regulatoryListId, string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<Entry> localVarResponse = GetEntryWithHttpInfo(regulatoryListId, substanceId, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find the entries for a specific Substance on List Returns a collection of entries for a single Substance from a single Regulatory List
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Entry</returns>
        public ApiResponse< Entry > GetEntryWithHttpInfo (string regulatoryListId, string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'regulatoryListId' is set
            if (regulatoryListId == null)
                throw new ApiException(400, "Missing required parameter 'regulatoryListId' when calling ListsApi->GetEntry");
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling ListsApi->GetEntry");

            var localVarPath = "/regulatory_lists/{regulatory_list_id}/entries/{substance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regulatoryListId != null) localVarPathParams.Add("regulatory_list_id", Configuration.ApiClient.ParameterToString(regulatoryListId)); // path parameter
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entry)));
            
        }

        /// <summary>
        /// Find the entries for a specific Substance on List Returns a collection of entries for a single Substance from a single Regulatory List
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Entry</returns>
        public async System.Threading.Tasks.Task<Entry> GetEntryAsync (string regulatoryListId, string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<Entry> localVarResponse = await GetEntryAsyncWithHttpInfo(regulatoryListId, substanceId, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find the entries for a specific Substance on List Returns a collection of entries for a single Substance from a single Regulatory List
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Entry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Entry>> GetEntryAsyncWithHttpInfo (string regulatoryListId, string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'regulatoryListId' is set
            if (regulatoryListId == null)
                throw new ApiException(400, "Missing required parameter 'regulatoryListId' when calling ListsApi->GetEntry");
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling ListsApi->GetEntry");

            var localVarPath = "/regulatory_lists/{regulatory_list_id}/entries/{substance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regulatoryListId != null) localVarPathParams.Add("regulatory_list_id", Configuration.ApiClient.ParameterToString(regulatoryListId)); // path parameter
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entry)));
            
        }

        /// <summary>
        /// Find a Regulatory List by ID Returns a single Regulatory List
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>RegulatoryList</returns>
        public RegulatoryList GetList (string regulatoryListId, string appKey = null, string appId = null)
        {
             ApiResponse<RegulatoryList> localVarResponse = GetListWithHttpInfo(regulatoryListId, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a Regulatory List by ID Returns a single Regulatory List
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of RegulatoryList</returns>
        public ApiResponse< RegulatoryList > GetListWithHttpInfo (string regulatoryListId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'regulatoryListId' is set
            if (regulatoryListId == null)
                throw new ApiException(400, "Missing required parameter 'regulatoryListId' when calling ListsApi->GetList");

            var localVarPath = "/regulatory_lists/{regulatory_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regulatoryListId != null) localVarPathParams.Add("regulatory_list_id", Configuration.ApiClient.ParameterToString(regulatoryListId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegulatoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegulatoryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegulatoryList)));
            
        }

        /// <summary>
        /// Find a Regulatory List by ID Returns a single Regulatory List
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of RegulatoryList</returns>
        public async System.Threading.Tasks.Task<RegulatoryList> GetListAsync (string regulatoryListId, string appKey = null, string appId = null)
        {
             ApiResponse<RegulatoryList> localVarResponse = await GetListAsyncWithHttpInfo(regulatoryListId, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a Regulatory List by ID Returns a single Regulatory List
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulatoryListId">Regulatory List ID</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (RegulatoryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegulatoryList>> GetListAsyncWithHttpInfo (string regulatoryListId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'regulatoryListId' is set
            if (regulatoryListId == null)
                throw new ApiException(400, "Missing required parameter 'regulatoryListId' when calling ListsApi->GetList");

            var localVarPath = "/regulatory_lists/{regulatory_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regulatoryListId != null) localVarPathParams.Add("regulatory_list_id", Configuration.ApiClient.ParameterToString(regulatoryListId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegulatoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegulatoryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegulatoryList)));
            
        }

        /// <summary>
        /// All Lists A paginated collection of Regulatory Lists
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>RegulatoryLists</returns>
        public RegulatoryLists GetLists (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
             ApiResponse<RegulatoryLists> localVarResponse = GetListsWithHttpInfo(limit, offset, q, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// All Lists A paginated collection of Regulatory Lists
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of RegulatoryLists</returns>
        public ApiResponse< RegulatoryLists > GetListsWithHttpInfo (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {

            var localVarPath = "/regulatory_lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegulatoryLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegulatoryLists) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegulatoryLists)));
            
        }

        /// <summary>
        /// All Lists A paginated collection of Regulatory Lists
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of RegulatoryLists</returns>
        public async System.Threading.Tasks.Task<RegulatoryLists> GetListsAsync (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
             ApiResponse<RegulatoryLists> localVarResponse = await GetListsAsyncWithHttpInfo(limit, offset, q, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// All Lists A paginated collection of Regulatory Lists
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (RegulatoryLists)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegulatoryLists>> GetListsAsyncWithHttpInfo (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {

            var localVarPath = "/regulatory_lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegulatoryLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegulatoryLists) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegulatoryLists)));
            
        }

    }
}
