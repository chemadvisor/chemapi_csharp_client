/* 
 * chemadvisor.io api
 *
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using chemApiClient.Client;
using chemApiClient.Model;

namespace chemApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubstancesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Links to related substances
        /// </summary>
        /// <remarks>
        /// Returns a collection of links to related substances
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>RelatedSubstances</returns>
        RelatedSubstances GetRelatedSubstances (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// Links to related substances
        /// </summary>
        /// <remarks>
        /// Returns a collection of links to related substances
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of RelatedSubstances</returns>
        ApiResponse<RelatedSubstances> GetRelatedSubstancesWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// Find substance by ID
        /// </summary>
        /// <remarks>
        /// Returns a single substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Substance</returns>
        Substance GetSubstance (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// Find substance by ID
        /// </summary>
        /// <remarks>
        /// Returns a single substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Substance</returns>
        ApiResponse<Substance> GetSubstanceWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// A substance&#39;s public identifiers
        /// </summary>
        /// <remarks>
        /// Returns a collection of public identifiers for a substance.
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Identifiers</returns>
        Identifiers GetSubstanceIdentifiers (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// A substance&#39;s public identifiers
        /// </summary>
        /// <remarks>
        /// Returns a collection of public identifiers for a substance.
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Identifiers</returns>
        ApiResponse<Identifiers> GetSubstanceIdentifiersWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// A substance&#39;s inventory status
        /// </summary>
        /// <remarks>
        /// Returns a collection of inventory objects for a substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Inventories</returns>
        Inventories GetSubstanceInventoryHits (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// A substance&#39;s inventory status
        /// </summary>
        /// <remarks>
        /// Returns a collection of inventory objects for a substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Inventories</returns>
        ApiResponse<Inventories> GetSubstanceInventoryHitsWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// LOLI lists containing this substance
        /// </summary>
        /// <remarks>
        /// Returns a paginated collection of list objects for lists contain this substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>RegulatoryLists</returns>
        RegulatoryLists GetSubstanceListHits (string substanceId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);

        /// <summary>
        /// LOLI lists containing this substance
        /// </summary>
        /// <remarks>
        /// Returns a paginated collection of list objects for lists contain this substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of RegulatoryLists</returns>
        ApiResponse<RegulatoryLists> GetSubstanceListHitsWithHttpInfo (string substanceId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);
        /// <summary>
        /// Get a Specific Substance&#39;s names
        /// </summary>
        /// <remarks>
        /// Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Identifier for the substance</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>SubstanceNames</returns>
        SubstanceNames GetSubstanceNames (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// Get a Specific Substance&#39;s names
        /// </summary>
        /// <remarks>
        /// Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Identifier for the substance</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of SubstanceNames</returns>
        ApiResponse<SubstanceNames> GetSubstanceNamesWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// All Substances
        /// </summary>
        /// <remarks>
        /// A paginated collection of substances
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Substances</returns>
        Substances GetSubstances (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);

        /// <summary>
        /// All Substances
        /// </summary>
        /// <remarks>
        /// A paginated collection of substances
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Substances</returns>
        ApiResponse<Substances> GetSubstancesWithHttpInfo (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Links to related substances
        /// </summary>
        /// <remarks>
        /// Returns a collection of links to related substances
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of RelatedSubstances</returns>
        System.Threading.Tasks.Task<RelatedSubstances> GetRelatedSubstancesAsync (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// Links to related substances
        /// </summary>
        /// <remarks>
        /// Returns a collection of links to related substances
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (RelatedSubstances)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedSubstances>> GetRelatedSubstancesAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// Find substance by ID
        /// </summary>
        /// <remarks>
        /// Returns a single substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Substance</returns>
        System.Threading.Tasks.Task<Substance> GetSubstanceAsync (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// Find substance by ID
        /// </summary>
        /// <remarks>
        /// Returns a single substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Substance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Substance>> GetSubstanceAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// A substance&#39;s public identifiers
        /// </summary>
        /// <remarks>
        /// Returns a collection of public identifiers for a substance.
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Identifiers</returns>
        System.Threading.Tasks.Task<Identifiers> GetSubstanceIdentifiersAsync (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// A substance&#39;s public identifiers
        /// </summary>
        /// <remarks>
        /// Returns a collection of public identifiers for a substance.
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Identifiers)</returns>
        System.Threading.Tasks.Task<ApiResponse<Identifiers>> GetSubstanceIdentifiersAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// A substance&#39;s inventory status
        /// </summary>
        /// <remarks>
        /// Returns a collection of inventory objects for a substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Inventories</returns>
        System.Threading.Tasks.Task<Inventories> GetSubstanceInventoryHitsAsync (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// A substance&#39;s inventory status
        /// </summary>
        /// <remarks>
        /// Returns a collection of inventory objects for a substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Inventories)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inventories>> GetSubstanceInventoryHitsAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// LOLI lists containing this substance
        /// </summary>
        /// <remarks>
        /// Returns a paginated collection of list objects for lists contain this substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of RegulatoryLists</returns>
        System.Threading.Tasks.Task<RegulatoryLists> GetSubstanceListHitsAsync (string substanceId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);

        /// <summary>
        /// LOLI lists containing this substance
        /// </summary>
        /// <remarks>
        /// Returns a paginated collection of list objects for lists contain this substance
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (RegulatoryLists)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegulatoryLists>> GetSubstanceListHitsAsyncWithHttpInfo (string substanceId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);
        /// <summary>
        /// Get a Specific Substance&#39;s names
        /// </summary>
        /// <remarks>
        /// Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Identifier for the substance</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of SubstanceNames</returns>
        System.Threading.Tasks.Task<SubstanceNames> GetSubstanceNamesAsync (string substanceId, string appKey = null, string appId = null);

        /// <summary>
        /// Get a Specific Substance&#39;s names
        /// </summary>
        /// <remarks>
        /// Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Identifier for the substance</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (SubstanceNames)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubstanceNames>> GetSubstanceNamesAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null);
        /// <summary>
        /// All Substances
        /// </summary>
        /// <remarks>
        /// A paginated collection of substances
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Substances</returns>
        System.Threading.Tasks.Task<Substances> GetSubstancesAsync (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);

        /// <summary>
        /// All Substances
        /// </summary>
        /// <remarks>
        /// A paginated collection of substances
        /// </remarks>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Substances)</returns>
        System.Threading.Tasks.Task<ApiResponse<Substances>> GetSubstancesAsyncWithHttpInfo (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubstancesApi : ISubstancesApi
    {
        private chemApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubstancesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubstancesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = chemApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubstancesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubstancesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = chemApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public chemApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Links to related substances Returns a collection of links to related substances
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>RelatedSubstances</returns>
        public RelatedSubstances GetRelatedSubstances (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<RelatedSubstances> localVarResponse = GetRelatedSubstancesWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Links to related substances Returns a collection of links to related substances
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of RelatedSubstances</returns>
        public ApiResponse< RelatedSubstances > GetRelatedSubstancesWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetRelatedSubstances");

            var localVarPath = "/substances/{substance_id}/related_substances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelatedSubstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedSubstances>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedSubstances) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedSubstances)));
            
        }

        /// <summary>
        /// Links to related substances Returns a collection of links to related substances
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of RelatedSubstances</returns>
        public async System.Threading.Tasks.Task<RelatedSubstances> GetRelatedSubstancesAsync (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<RelatedSubstances> localVarResponse = await GetRelatedSubstancesAsyncWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Links to related substances Returns a collection of links to related substances
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (RelatedSubstances)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedSubstances>> GetRelatedSubstancesAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetRelatedSubstances");

            var localVarPath = "/substances/{substance_id}/related_substances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelatedSubstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedSubstances>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedSubstances) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedSubstances)));
            
        }

        /// <summary>
        /// Find substance by ID Returns a single substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Substance</returns>
        public Substance GetSubstance (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<Substance> localVarResponse = GetSubstanceWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find substance by ID Returns a single substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Substance</returns>
        public ApiResponse< Substance > GetSubstanceWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstance");

            var localVarPath = "/substances/{substance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Substance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Substance) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Substance)));
            
        }

        /// <summary>
        /// Find substance by ID Returns a single substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Substance</returns>
        public async System.Threading.Tasks.Task<Substance> GetSubstanceAsync (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<Substance> localVarResponse = await GetSubstanceAsyncWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find substance by ID Returns a single substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Substance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Substance>> GetSubstanceAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstance");

            var localVarPath = "/substances/{substance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Substance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Substance) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Substance)));
            
        }

        /// <summary>
        /// A substance&#39;s public identifiers Returns a collection of public identifiers for a substance.
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Identifiers</returns>
        public Identifiers GetSubstanceIdentifiers (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<Identifiers> localVarResponse = GetSubstanceIdentifiersWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A substance&#39;s public identifiers Returns a collection of public identifiers for a substance.
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Identifiers</returns>
        public ApiResponse< Identifiers > GetSubstanceIdentifiersWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstanceIdentifiers");

            var localVarPath = "/substances/{substance_id}/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstanceIdentifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identifiers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Identifiers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identifiers)));
            
        }

        /// <summary>
        /// A substance&#39;s public identifiers Returns a collection of public identifiers for a substance.
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Identifiers</returns>
        public async System.Threading.Tasks.Task<Identifiers> GetSubstanceIdentifiersAsync (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<Identifiers> localVarResponse = await GetSubstanceIdentifiersAsyncWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A substance&#39;s public identifiers Returns a collection of public identifiers for a substance.
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Identifiers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Identifiers>> GetSubstanceIdentifiersAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstanceIdentifiers");

            var localVarPath = "/substances/{substance_id}/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstanceIdentifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identifiers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Identifiers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identifiers)));
            
        }

        /// <summary>
        /// A substance&#39;s inventory status Returns a collection of inventory objects for a substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Inventories</returns>
        public Inventories GetSubstanceInventoryHits (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<Inventories> localVarResponse = GetSubstanceInventoryHitsWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A substance&#39;s inventory status Returns a collection of inventory objects for a substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Inventories</returns>
        public ApiResponse< Inventories > GetSubstanceInventoryHitsWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstanceInventoryHits");

            var localVarPath = "/substances/{substance_id}/inventories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstanceInventoryHits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inventories>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Inventories) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inventories)));
            
        }

        /// <summary>
        /// A substance&#39;s inventory status Returns a collection of inventory objects for a substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Inventories</returns>
        public async System.Threading.Tasks.Task<Inventories> GetSubstanceInventoryHitsAsync (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<Inventories> localVarResponse = await GetSubstanceInventoryHitsAsyncWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A substance&#39;s inventory status Returns a collection of inventory objects for a substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance id</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Inventories)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Inventories>> GetSubstanceInventoryHitsAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstanceInventoryHits");

            var localVarPath = "/substances/{substance_id}/inventories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstanceInventoryHits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inventories>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Inventories) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inventories)));
            
        }

        /// <summary>
        /// LOLI lists containing this substance Returns a paginated collection of list objects for lists contain this substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>RegulatoryLists</returns>
        public RegulatoryLists GetSubstanceListHits (string substanceId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
             ApiResponse<RegulatoryLists> localVarResponse = GetSubstanceListHitsWithHttpInfo(substanceId, limit, offset, q, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// LOLI lists containing this substance Returns a paginated collection of list objects for lists contain this substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of RegulatoryLists</returns>
        public ApiResponse< RegulatoryLists > GetSubstanceListHitsWithHttpInfo (string substanceId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstanceListHits");

            var localVarPath = "/substances/{substance_id}/regulatory_lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstanceListHits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegulatoryLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegulatoryLists) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegulatoryLists)));
            
        }

        /// <summary>
        /// LOLI lists containing this substance Returns a paginated collection of list objects for lists contain this substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of RegulatoryLists</returns>
        public async System.Threading.Tasks.Task<RegulatoryLists> GetSubstanceListHitsAsync (string substanceId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
             ApiResponse<RegulatoryLists> localVarResponse = await GetSubstanceListHitsAsyncWithHttpInfo(substanceId, limit, offset, q, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// LOLI lists containing this substance Returns a paginated collection of list objects for lists contain this substance
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Substance ID</param>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (RegulatoryLists)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegulatoryLists>> GetSubstanceListHitsAsyncWithHttpInfo (string substanceId, int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstanceListHits");

            var localVarPath = "/substances/{substance_id}/regulatory_lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstanceListHits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegulatoryLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegulatoryLists) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegulatoryLists)));
            
        }

        /// <summary>
        /// Get a Specific Substance&#39;s names Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Identifier for the substance</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>SubstanceNames</returns>
        public SubstanceNames GetSubstanceNames (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<SubstanceNames> localVarResponse = GetSubstanceNamesWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Specific Substance&#39;s names Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Identifier for the substance</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of SubstanceNames</returns>
        public ApiResponse< SubstanceNames > GetSubstanceNamesWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstanceNames");

            var localVarPath = "/substances/{substance_id}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstanceNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubstanceNames>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubstanceNames) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubstanceNames)));
            
        }

        /// <summary>
        /// Get a Specific Substance&#39;s names Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Identifier for the substance</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of SubstanceNames</returns>
        public async System.Threading.Tasks.Task<SubstanceNames> GetSubstanceNamesAsync (string substanceId, string appKey = null, string appId = null)
        {
             ApiResponse<SubstanceNames> localVarResponse = await GetSubstanceNamesAsyncWithHttpInfo(substanceId, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Specific Substance&#39;s names Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="substanceId">Identifier for the substance</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (SubstanceNames)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubstanceNames>> GetSubstanceNamesAsyncWithHttpInfo (string substanceId, string appKey = null, string appId = null)
        {
            // verify the required parameter 'substanceId' is set
            if (substanceId == null)
                throw new ApiException(400, "Missing required parameter 'substanceId' when calling SubstancesApi->GetSubstanceNames");

            var localVarPath = "/substances/{substance_id}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (substanceId != null) localVarPathParams.Add("substance_id", Configuration.ApiClient.ParameterToString(substanceId)); // path parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstanceNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubstanceNames>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubstanceNames) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubstanceNames)));
            
        }

        /// <summary>
        /// All Substances A paginated collection of substances
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Substances</returns>
        public Substances GetSubstances (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
             ApiResponse<Substances> localVarResponse = GetSubstancesWithHttpInfo(limit, offset, q, appKey, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// All Substances A paginated collection of substances
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>ApiResponse of Substances</returns>
        public ApiResponse< Substances > GetSubstancesWithHttpInfo (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {

            var localVarPath = "/substances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Substances>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Substances) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Substances)));
            
        }

        /// <summary>
        /// All Substances A paginated collection of substances
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of Substances</returns>
        public async System.Threading.Tasks.Task<Substances> GetSubstancesAsync (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {
             ApiResponse<Substances> localVarResponse = await GetSubstancesAsyncWithHttpInfo(limit, offset, q, appKey, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// All Substances A paginated collection of substances
        /// </summary>
        /// <exception cref="chemApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to retrieve (optional, default to 10)</param>
        /// <param name="offset">Offset of the first item returned (optional, default to 0)</param>
        /// <param name="q">Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)</param>
        /// <param name="appKey"> (optional)</param>
        /// <param name="appId"> (optional)</param>
        /// <returns>Task of ApiResponse (Substances)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Substances>> GetSubstancesAsyncWithHttpInfo (int? limit = null, int? offset = null, string q = null, string appKey = null, string appId = null)
        {

            var localVarPath = "/substances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (appKey != null) localVarHeaderParams.Add("app_key", Configuration.ApiClient.ParameterToString(appKey)); // header parameter
            if (appId != null) localVarHeaderParams.Add("app_id", Configuration.ApiClient.ParameterToString(appId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Substances>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Substances) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Substances)));
            
        }

    }
}
