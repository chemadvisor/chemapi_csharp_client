/* 
 * chemadvisor.io api
 *
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using chemApiClient.Client;
using chemApiClient.Api;
using chemApiClient.Model;

namespace chemApiClient.Test
{
    /// <summary>
    ///  Class for testing ListsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ListsApiTests
    {
        private ListsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ListsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ListsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ListsApi
            //Assert.IsInstanceOfType(typeof(ListsApi), instance, "instance is a ListsApi");
        }

        
        /// <summary>
        /// Test GetEntries
        /// </summary>
        [Test]
        public void GetEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string regulatoryListId = null;
            //int? limit = null;
            //int? offset = null;
            //string q = null;
            //string appKey = null;
            //string appId = null;
            //var response = instance.GetEntries(regulatoryListId, limit, offset, q, appKey, appId);
            //Assert.IsInstanceOf<Entries> (response, "response is Entries");
        }
        
        /// <summary>
        /// Test GetEntry
        /// </summary>
        [Test]
        public void GetEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string regulatoryListId = null;
            //string substanceId = null;
            //string appKey = null;
            //string appId = null;
            //var response = instance.GetEntry(regulatoryListId, substanceId, appKey, appId);
            //Assert.IsInstanceOf<Entry> (response, "response is Entry");
        }
        
        /// <summary>
        /// Test GetList
        /// </summary>
        [Test]
        public void GetListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string regulatoryListId = null;
            //string appKey = null;
            //string appId = null;
            //var response = instance.GetList(regulatoryListId, appKey, appId);
            //Assert.IsInstanceOf<RegulatoryList> (response, "response is RegulatoryList");
        }
        
        /// <summary>
        /// Test GetLists
        /// </summary>
        [Test]
        public void GetListsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //string q = null;
            //string appKey = null;
            //string appId = null;
            //var response = instance.GetLists(limit, offset, q, appKey, appId);
            //Assert.IsInstanceOf<RegulatoryLists> (response, "response is RegulatoryLists");
        }
        
    }

}
